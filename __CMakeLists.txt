cmake_minimum_required(VERSION 3.21)

# This template attempts to be "fetch_content"-able
# so that it works well with tools like CPM or other
# manual dependency management.

# Only set the cxx_standard if it is not set by someone else.
if (NOT DEFINED CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()

# strongly encouraged to enable this globally to avoid conflicts between
# -Wpedantic being enabled and -std=c++17 and -std=gnu++17 for example
# when compiling with PCH enabled.
set(CMAKE_CXX_EXTENSIONS OFF)

# Set the project name and language.
project(
  ilp_gaffer_movie
  VERSION 0.0.1
  DESCRIPTION ""
  #HOMEPAGE_URL "%%myurl%%"
  LANGUAGES CXX C)

list(APPEND CMAKE_MODULE_PATH
  ${CMAKE_CURRENT_LIST_DIR}/cmake/modules)


include(cmake/PreventInSourceBuilds.cmake)
include(ProjectOptions.cmake)

ilp_gaffer_movie_setup_options()

ilp_gaffer_movie_global_options()
include(Dependencies.cmake)
ilp_gaffer_movie_setup_dependencies()

ilp_gaffer_movie_local_options()

# NOTE(tohi): Disabling this for now since it is causing linker issues.
# 
# Don't know if this should be set globally from here or not...
# set(CMAKE_CXX_VISIBILITY_PRESET hidden)

set(GIT_SHA
    "Unknown"
    CACHE STRING "SHA this build was generated from")
string(
  SUBSTRING "${GIT_SHA}"
            0
            8
            GIT_SHORT_SHA)
message(STATUS "GIT_SHA: ${GIT_SHA}")

target_compile_features(ilp_gaffer_movie_options INTERFACE cxx_std_${CMAKE_CXX_STANDARD})

add_library(ilp_gaffer_movie::ilp_gaffer_movie_options ALIAS ilp_gaffer_movie_options)
add_library(ilp_gaffer_movie::ilp_gaffer_movie_warnings ALIAS ilp_gaffer_movie_warnings)

#add_library(myproject::myproject_options INTERFACE IMPORTED)
#add_library(myproject::myproject_warnings INTERFACE IMPORTED)

# Configure files based on CMake configuration options.
add_subdirectory(configured_files)

# Adding the src:
add_subdirectory(src)

# Don't even look at tests if we're not top level
if(NOT PROJECT_IS_TOP_LEVEL)
  message(STATUS "PROJECT_IS_TOP_LEVEL: ${PROJECT_IS_TOP_LEVEL}")
  return()
endif()

# Adding the tests:
include(CTest)

if(BUILD_TESTING)
  # message(AUTHOR_WARNING "Building Tests. Be sure to check out test/constexpr_tests.cpp for constexpr testing")
  add_subdirectory(test)
endif()

# NOTE(tohi): Skip fuzz testing for now...
#
# if(myproject_BUILD_FUZZ_TESTS)
#   message(AUTHOR_WARNING "Building Fuzz Tests, using fuzzing sanitizer https://www.llvm.org/docs/LibFuzzer.html")
#   if (NOT myproject_ENABLE_ADDRESS_SANITIZER AND NOT myproject_ENABLE_THREAD_SANITIZER)
#     message(WARNING "You need asan or tsan enabled for meaningful fuzz testing")
#   endif()
#   add_subdirectory(fuzz_test)
# endif()

if(CMAKE_SKIP_INSTALL_RULES)
  return()
endif()

include(cmake/PackageProject.cmake)

# Add other targets that you want installed here, by default we just package the one executable
# we know we want to ship.
ilp_gaffer_movie_package_project(
  TARGETS
  ilp_gaffer_movie
  ilp_mux
  ilp_gaffer_movie_options
  ilp_gaffer_movie_warnings
  # FIXME: this does not work! CK
  # PRIVATE_DEPENDENCIES_CONFIGURED project_options project_warnings
)

# Experience shows that explicit package naming can help make it easier to sort
# out potential ABI related issues before they start, while helping you
# track a build to a specific GIT SHA.
set(CPACK_PACKAGE_FILE_NAME
    "${CMAKE_PROJECT_NAME}-${CMAKE_PROJECT_VERSION}-${GIT_SHORT_SHA}-${CMAKE_SYSTEM_NAME}-${CMAKE_BUILD_TYPE}-${CMAKE_CXX_COMPILER_ID}-${CMAKE_CXX_COMPILER_VERSION}"
)

include(CPack)
